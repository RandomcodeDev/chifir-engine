#once

{
	.ProjectName = 'Launcher'
	.ProjectPath = 'launcher'

	.ProjectConfigs = {}
	ForEach(.BuildConfig in .BuildConfigs)
	{
		Using(.BuildConfig)

		.ObjectDir = 'obj/$CompilerName$/$PlatformName$/$ArchName$/$ConfigName$'
		.OutputDir = 'out/$CompilerName$/$PlatformName$/$ArchName$/$ConfigName$'

		Unity('$ProjectName$-Unity-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
		{
			.UnityInputFiles =
			{
				'$ProjectPath$/main.cpp',
			}

			If (.PlatformName in .WindowsLike)
			{
				If (.PlatformName != 'Xbox360')
				{
					^UnityInputFiles +
					{
						'$ProjectPath$/main_win32.cpp'
					}
				}

				If (.PlatformName == 'Xbox360')
				{
					^UnityInputFiles +
					{
						'$ProjectPath$/../public/base/dllmain.cpp'
					}
				}
			}

			If (.PlatformName == 'Switch')
			{
				^UnityInputFiles +
				{
					'$ProjectPath$/../private/launcher/main_switch.cpp'
				}
			}
			
			.UnityOutputPath = '$ObjectDir$/$ProjectPath$/'
			.UnityOutputPattern = '$ProjectName$_Unity*.cpp'
		}

		ObjectList('$ProjectName$-Objs-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
		{
			.CompilerInputUnity = '$ProjectName$-Unity-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
			.CompilerOutputPath = '$ObjectDir$/$ProjectPath$/'
		}

		Print('$ProjectName$-Exe-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
		Executable('$ProjectName$-Exe-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
		{
			.Libraries =
			{
				'$ProjectName$-Objs-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$',
				'Base-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$',
				'CommonFiles-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$',
				//'Utility-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
			}
			If (.StaticBuild)
			{
				^Libraries +
				{
					'Engine-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$',
					'VideoSystem-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
				}
			}
			.LinkerOutput = '$OutputDir$/$GameName$$ExeExtension$'
			If (.PlatformName in .WindowsLike)
			{
				^LinkerOptions + ' /NATVIS:$ProjectPath$/../public/Chifir.natvis'
			}
			If (.PlatformName == 'Xbox360')
			{
				// Has to be a DLL in order to statically link to Base.xex
				^LinkerOutput = '$OutputDir$/$GameName$$DLLExtension$'
				^LinkerOptions + ' /DLL /AUTODEF:$ObjectDir$/$ProjectName$/$ProjectName$.def'
			}
			If (.PlatformName == 'Linux')
			{
				^LinkerStampExe	 = '/bin/sh'
				^ExtractDebugInfo = 'objcopy --only-keep-debug $LinkerOutput$ $LinkerOutput$.debug'
				^StripDebugInfo = 'objcopy --strip-debug $LinkerOutput$'
				^AddDebugLink = 'objcopy --add-gnu-debuglink $LinkerOutput$.debug $LinkerOutput$'
				^LinkerStampExeArgs = '-c "$ExtractDebugInfo$ && $StripDebugInfo$ && $AddDebugLink$"'
			}
		}

#if HAVE_SWITCH
		If (.PlatformName == 'Switch')
		{
			Exec('$ProjectName$-Nso-$CompilerName$-$PlatformName$-$ConfigName$')
			{
				.ExecExecutable = '$MakeNso$'
				.ExecInput = '$OutputDir$/$GameName$$ExeExtension$'
				.ExecOutput = '$OutputDir$/$GameName$.nso'
				.ExecArguments = '"%1" "%2"'
			}
		}
#endif

		// This is the main target
		Alias('$ProjectName$-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
		{
			.Targets = '$ProjectName$-Exe-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
			If (.PlatformName == 'Switch')
			{
				^Targets = '$ProjectName$-Nso-$CompilerName$-$PlatformName$-$ConfigName$'
			}
		}
		^'Targets_$CompilerName$_$PlatformName$_$ArchName$_$ConfigName$' + {'$ProjectName$-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'}

#if __WINDOWS__
		.ProjectConfig = 
		[
			Using(.'Project_$CompilerName$_$PlatformName$_$ArchName$_$ConfigName$')
			.Target = '$ProjectName$-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
		]
		^ProjectConfigs + .ProjectConfig
#endif
	}

#if __WINDOWS__
	.Options = []
	CreateVcxProjectExe(.ProjectName, .ProjectPath, .ProjectConfigs, .Options)
#endif
}
