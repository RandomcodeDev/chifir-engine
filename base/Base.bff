#once

{
	.ProjectName = 'Base'
	.ProjectPath = 'base'

	.ProjectConfigs = {}
	ForEach(.BuildConfig in .BuildConfigs)
	{
		Using(.BuildConfig)

		.CompilerOptions + ' -DIN_BASE'

		.ObjectDir = 'obj/$CompilerName$/$PlatformName$/$ArchName$/$ConfigName$'
		.OutputDir = 'out/$CompilerName$/$PlatformName$/$ArchName$/$ConfigName$'

		Unity('$ProjectName$-Unity-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
		{
			.UnityInputFiles = 
			{
				'$ProjectPath$/base.cpp',
				'$ProjectPath$/basicstr.cpp',
				'$ProjectPath$/filesystem.cpp',
				'$ProjectPath$/filesystem_raw.cpp',
				'$ProjectPath$/log.cpp',
				'$ProjectPath$/memory.cpp',
				'$ProjectPath$/platform.cpp',
				'$ProjectPath$/stb.cpp',
				'$ProjectPath$/string.cpp'
			}
			If (!.StaticBuild)
			{
				^UnityInputFiles +
				{
					'$ProjectPath$/../public/base/memoverride.cpp'
					'$ProjectPath$/../public/base/libc.cpp'
				}
			}

			If (.PlatformName in .WindowsLike)
			{
				^UnityInputFiles +
				{
					'$ProjectPath$/filesystem_win32.cpp',
					'$ProjectPath$/loader_win32.cpp',
					'$ProjectPath$/platform_win32.cpp',
				}
				If (!.StaticBuild)
				{
					^UnityInputFiles +
					{
						'$ProjectPath$/../public/base/dllmain.cpp',
						'$ProjectPath$/../public/base/compiler_msvc.cpp'
					}
				}
			}

			If (.PlatformName == 'Switch')
			{
				^UnityInputFiles +
				{
					'$ProjectPath$/../private/base/filesystem_switch.cpp',
					'$ProjectPath$/../private/base/platform_switch.cpp',
				}
			}

			If (.CompilerName == 'Clang')
			{
				If (!.StaticBuild)
				{
					^UnityInputFiles +
					{
						'$ProjectPath$/../public/base/compiler_clang.cpp'
					}
				}
			}
			
			.UnityOutputPath = '$ObjectDir$/$ProjectPath$/'
			.UnityOutputPattern = '$ProjectName$_Unity*.cpp'
		}

#if __WINDOWS__
		If (.PlatformName in .WindowsLike)
		{
			If (.ArchName == 'AMD64')
			{
				Exec('$ProjectName$-ASM-Win32Stubs-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
				{
					.ExecExecutable = .MASM
					.ExecInput = '$ProjectPath$/stubs_win32_amd64.asm'
					.ExecOutput = '$ObjectDir$/$ProjectPath$/stubs_win32_amd64.obj'
					.ExecArguments = .MASMOptions
					.ExecWorkingDir = '$ObjectDir$/$ProjectPath$'
				}
			}
			If (.ArchName == 'x86')
			{
				Exec('$ProjectName$-ASM-Win32Stubs-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
				{
					.ExecExecutable = .MASM
					.ExecInput = '$ProjectPath$/stubs_win32_x86.asm'
					.ExecOutput = '$ObjectDir$/$ProjectPath$/stubs_win32_x86.obj'
					.ExecArguments = .MASMOptions
					.ExecWorkingDir = '$ObjectDir$/$ProjectPath$'
				}
			}
			If (.PlatformName == 'Xbox360')
			{
				Exec('$ProjectName$-ASM-Win32Stubs-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
				{
					.ExecExecutable = .MASM
					.ExecInput = '$ProjectPath$/stubs_win32_ppc.asm'
					.ExecOutput = '$ObjectDir$/$ProjectPath$/stubs_win32_ppc.obj'
					.ExecArguments = .MASMOptions
					.ExecWorkingDir = '$ObjectDir$/$ProjectPath$'
				}
			}
		}
#endif

		If (.StaticBuild)
		{
			Library('$ProjectName$-DLL-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
			{
				.CompilerInputUnity = '$ProjectName$-Unity-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
				.CompilerOutputPath = '$ObjectDir$/$ProjectPath$/'
				.LibrarianOutput = '$OutputDir$/$ProjectName$$LibExtension$'

				.LibrarianAdditionalInputs = {}
				If (.PlatformName in .WindowsLike)
				{
					If (.ArchName == 'AMD64')
					{
						^LibrarianAdditionalInputs +
						{
							'$ObjectDir$/$ProjectPath$/stubs_win32_amd64.obj'
						}
					}
					If (.ArchName == 'x86')
					{
						^LibrarianAdditionalInputs +
						{
							'$ObjectDir$/$ProjectPath$/stubs_win32_x86.obj'
						}
					}
					If (.PlatformName == 'Xbox360')
					{
						^LibrarianAdditionalInputs +
						{
							'$ObjectDir$/$ProjectPath$/stubs_win32_ppc.obj'
						}
					}
				}
			}
		}

		If (!.StaticBuild)
		{
			ObjectList('$ProjectName$-Objs-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
			{
				.CompilerInputUnity = '$ProjectName$-Unity-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
				.CompilerOutputPath = '$ObjectDir$/$ProjectPath$/'
			}

			DLL('$ProjectName$-DLL-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
			{
				.PreBuildDependencies = {'CommonFiles-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'}
				.Libraries =
				{
					'$ProjectName$-Objs-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
				}
				.LinkerOutput = '$OutputDir$/$ProjectName$$DLLExtension$'
				If (.PlatformName in .WindowsLike)
				{
					^LinkerOptions + ' /DLL'
					If (.ArchName == 'AMD64')
					{
						^Libraries + {
							'$ObjectDir$/$ProjectPath$/compiler_msvc_amd64.obj',
							'$ObjectDir$/$ProjectPath$/stubs_win32_amd64.obj'
						}
					}
					If (.ArchName == 'x86')
					{
						^Libraries +
						{
							'$ObjectDir$/$ProjectPath$/compiler_msvc_x86.obj',
							'$ObjectDir$/$ProjectPath$/stubs_win32_x86.obj'
						}
					}
				}
			}
		}

		// This is the main target
		Alias('$ProjectName$-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
		{
			.Targets = '$ProjectName$-DLL-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
		}
		^'Targets_$CompilerName$_$PlatformName$_$ArchName$_$ConfigName$' + {'$ProjectName$-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'}

		.ProjectConfig = 
		[
			Using(.'Project_$CompilerName$_$PlatformName$_$ArchName$_$ConfigName$')
			.Target = '$ProjectName$-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
		]
		^ProjectConfigs + .ProjectConfig
	}
	
	.Options = [.ProjectAllowedFileExtensions = '*.cpp;*.h;*.natvis;*.bff']
	CreateVcxProject(.ProjectName, .ProjectPath, .ProjectConfigs, .Options)
}
