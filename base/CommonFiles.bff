#once

{
	.ProjectName = 'CommonFiles'
	.ProjectPath = 'base'

	.ProjectConfigs = {}
	ForEach(.BuildConfig in .BuildConfigs)
	{
		Using(.BuildConfig)

		.ObjectDir = 'obj/$CompilerName$/$PlatformName$/$ArchName$/$ConfigName$'
		.OutputDir = 'out/$CompilerName$/$PlatformName$/$ArchName$/$ConfigName$'

		Unity('$ProjectName$-Unity-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
		{
			.UnityInputFiles = {'$ProjectPath$/../public/base/memoverride.cpp'}

			.WindowsLike = {'Windows', 'GDK', 'XboxScarlett', 'Xbox360'}
			If (.PlatformName in .WindowsLike)
			{
				^UnityInputFiles +
				{
					'$ProjectPath$/../public/base/compiler_msvc.cpp',
				}
			}

			If (.CompilerName == 'Clang')
			{
				^UnityInputFiles + {'$ProjectPath$/../public/base/compiler_clang.cpp'}
			}
			
			.UnityOutputPath = '$ObjectDir$/$ProjectPath$/'
			.UnityOutputPattern = '$ProjectName$_Unity*.cpp'
		}

#if __WINDOWS__
		If (.PlatformName in .WindowsLike)
		{
			If (.ArchName == 'AMD64')
			{
				Exec('$ProjectName$-ASM-MSVCSup-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
				{
					.ExecExecutable = .MASM
					.ExecInput = '$ProjectPath$/../public/base/compiler_msvc_amd64.asm'
					.ExecOutput = '$ObjectDir$/$ProjectPath$/compiler_msvc_amd64.obj'
					.ExecArguments = .MASMOptions
					.ExecWorkingDir = '$ObjectDir$/$ProjectPath$'
				}
			}
			If (.ArchName == 'x86')
			{
				Exec('$ProjectName$-ASM-MSVCSup-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
				{
					.ExecExecutable = .MASM
					.ExecInput = '$ProjectPath$/../public/base/compiler_msvc_x86.asm'
					.ExecOutput = '$ObjectDir$/$ProjectPath$/compiler_msvc_x86.obj'
					.ExecArguments = .MASMOptions
					.ExecWorkingDir = '$ObjectDir$/$ProjectPath$'
				}
			}
		}
#endif

		Library('$ProjectName$-Lib-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
		{
			.CompilerInputUnity = '$ProjectName$-Unity-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
			.CompilerOutputPath = '$ObjectDir$/$ProjectPath$/'
			.LibrarianOutput = '$OutputDir$/$ProjectName$$LibExtension$'
			.LibrarianAdditionalInputs = {}

			If (.PlatformName in .WindowsLike)
			{
				If (.ArchName == 'AMD64')
				{
					^LibrarianAdditionalInputs + {'$ObjectDir$\$ProjectPath$\compiler_msvc_amd64.obj'}
				}
				If (.ArchName == 'x86')
				{
					^LibrarianAdditionalInputs + {'$ObjectDir$\$ProjectPath$\compiler_msvc_x86.obj'}
				}
			}
		}

		// This is the main target
		Alias('$ProjectName$-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$')
		{
			.Targets = '$ProjectName$-Lib-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
		}
		^'Targets_$CompilerName$_$PlatformName$_$ArchName$_$ConfigName$' + {'$ProjectName$-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'}

		.ProjectConfig = 
		[
			Using(.'Project_$CompilerName$_$PlatformName$_$ArchName$_$ConfigName$')
			.Target = '$ProjectName$-$CompilerName$-$PlatformName$-$ArchName$-$ConfigName$'
		]
		^ProjectConfigs + .ProjectConfig
	}

	.Options = []
	CreateVcxProject(.ProjectName, .ProjectPath, .ProjectConfigs, .Options)
}
